/*Given a sorted array of unique integers and a target integer, return true if there exists a pair of numbers that sum to target, false otherwise. 
This problem is similar to Two Sum.*/

// code in C++

bool checkForTarget(vector<int>& nums, int target) {
    int left = 0;
    int right = nums.size() - 1;
    while (left < right) {
        int curr = nums[left] + nums[right];
        if (curr == target) {
            return true;
        }
        if (curr > target) {
            right--;
        } else {
            left++;
        }
    }

    return false;
}
-------------------------------------------------------------------------------------------------------

// Code in java

public boolean checkForTarget(int[] nums, int target) {
    int left = 0;
    int right = nums.length - 1;

    while (left < right) {
        int curr = nums[left] + nums[right];
        if (curr == target) {
            return true;
        }

        if (curr > target) {
            right--;
        } else {
            left++;
        }
    }

    return false;
}
---------------------------------------------------------------------------------------------------------

# Code in python

def check_for_target(nums, target):
    left = 0
    right = len(nums) - 1

    while left < right:
        curr = nums[left] + nums[right]
        if curr == target:
            return True
        if curr > target:
            right -= 1
        else:
            left += 1
    
    return False
    
